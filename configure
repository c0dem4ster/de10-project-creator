#!/usr/bin/python3

# configuration script for setting up ghdl & quartus environment

import os
import sys
import datetime
import subprocess

template_params = {}

def red(string):
  return "\033[91m{}\033[00m".format(string)

def green(string):
  return "\033[92m{}\033[00m".format(string)

def yellow(string):
  return "\033[93m{}\033[00m".format(string)

def parse_template(template_file, out_file):
  lines = []
  with open(template_file, "rt") as fin:
    for line in fin.readlines():
      for param, content in template_params.items():
        line = line.replace(param, content)
      lines.append(line)
  with open(out_file, "wt") as fout:
    fout.writelines(lines)


def main():
  template_files = [
    "/Makefile",
    "/TB_DE10_LITE.vhd",
    "/DE10_LITE_const_pkg.vhd",
    "/DE10_LITE.qpf",
    "/DE10_LITE.qsf",
    "/DE10_LITE.sdc",
    "/DE10_LITE.vhd"
  ]
  
  
  project = input("enter project name: ")
  
  template_params["[author]"]       = input("enter your name: ")
  template_params["[description]"]  = input("enter a project description: ")
  template_params["[project]"]      = project
  template_params["[date]"]         = datetime.date.today().strftime("%d.%m.%Y")
  template_params["[time]"]         = datetime.datetime.now().strftime("%H:%M:%S")
  template_params["[all_entities]"] = "DE10_LITE_const_pkg DE10_LITE TB_DE10_LITE"
  template_params["[top_entity]"]   = "TB_DE10_LITE"
  template_params["[qversion]"]     = "19.1.0"
  template_params["[qsf_files]"]    = "\n".join([
    "set_global_assignment -name VHDL_FILE {}".format(name)
    for name in ["DE10_LITE_const_pkg.vhd", "DE10_LITE.vhd"]
  ])
  
  # create project dir
  os.mkdir(project)
  os.chdir(project)
  
  # parse template files
  for elem in template_files:
    parse_template(os.path.dirname(os.path.realpath(__file__)) + elem, os.getcwd() + elem)

  # initialize git repository
  subprocess.run(['git', 'init'])
  subprocess.run(['git', 'add'] + [name[1:] for name in template_files])
  subprocess.run(['git', 'commit', '-m \'initial commit\''])

  print("project {} successfully generated".format(green(project)))


if __name__ == "__main__":
  main()
